class Solution {
    public long minimumDifference(int[] nums) {
        int n=nums.length/3;
        long[] pre=new long[3*n];
        long[] suf=new long[3*n];

        PriorityQueue<Integer> pq=new PriorityQueue<>(Collections.reverseOrder());
        long curr=0;

        for(int i=0;i<3*n;i++){
            curr+=nums[i];
            pq.offer(nums[i]);
            if(pq.size()>n) curr-=pq.poll();
            if(pq.size()==n) pre[i]=curr;
        }

        pq=new PriorityQueue<>();
        curr=0;
        for(int i=3*n-1;i>=0;i--){
            curr+=nums[i];
            pq.offer(nums[i]);
            if(pq.size()>n) curr-=pq.poll();
            if(pq.size()==n) suf[i]=curr;
        }

        long ans=Integer.MAX_VALUE;
        for(int i=n-1;i<2*n;i++){
            long diff=pre[i]-suf[i+1];
            ans=Math.min(ans,diff);
        }
        return ans;


    }
}
