// https://leetcode.com/problems/word-search/
class Solution {
    public boolean recur(int row, int col, char[][] board, String word, int ind, boolean[][] visit){
        if(ind==word.length()) return true;
        if( row<0||col<0||row>=board.length||
            col>=board[0].length||visit[row][col]||
            board[row][col]!=word.charAt(ind))
            return false;
        
        visit[row][col]=true;

        if( recur(row+1,col,board,word,ind+1,visit)||
            recur(row,col+1,board,word,ind+1,visit)||
            recur(row-1,col,board,word,ind+1,visit)||
            recur(row,col-1,board,word,ind+1,visit)
            )
            return true;
        
        visit[row][col]=false;
        return false;


    }
    public boolean exist(char[][] board, String word) {
        int n=board.length, m=board[0].length;
        boolean visit[][]=new boolean[n][m];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(board[i][j]==word.charAt(0)){
                    boolean flag=recur(i,j,board,word,0,visit);
                    if(flag) return true;
                }
            }
        }
        return false;
    }
}
