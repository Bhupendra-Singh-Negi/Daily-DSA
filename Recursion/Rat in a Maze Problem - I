class Solution {
    // Function to find all possible paths
    public void recur(int[][] maze,ArrayList<String> ans, int row,int col, StringBuilder sb, int[][] visited ){
        int n=maze.length;
        if(row<0||col<0||row>=n||col>=n||visited[row][col]==1||maze[row][col]==0) return;
        if(row==n-1&&col==n-1){
            ans.add(sb.toString());
            return;
        }
        visited[row][col]=1;
        
            sb.append('D');
        recur(maze,ans,row+1,col,sb,visited);
            sb.deleteCharAt(sb.length()-1);
           
            sb.append('L');
        recur(maze,ans,row,col-1,sb,visited);
            sb.deleteCharAt(sb.length()-1);
            
            sb.append('R');
        recur(maze,ans,row,col+1,sb,visited);
            sb.deleteCharAt(sb.length()-1);
            
            sb.append('U');
        recur(maze,ans,row-1,col,sb,visited);
            sb.deleteCharAt(sb.length()-1);
            
            
        visited[row][col]=0;
        
    }
    public ArrayList<String> ratInMaze(int[][] maze) {
        // code here
        ArrayList<String> ans=new ArrayList<>();
        int n=maze.length;
        int visited[][]=new int[n][n];
        if(maze[0][0]==1)
        recur(maze,ans,0,0,new StringBuilder(),visited);
        return ans;
    }
}
